C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include <eeprom.h>
   3          #define NEXIE_PORT P1
   4          
   5          sbit SER_L = P0^0;
   6          sbit OE_L = P0^1;
   7          sbit RCLK_L = P0^2;
   8          sbit SRCLK_L = P0^3;
   9          sbit SRCLR_L = P0^4;
  10          
  11          sbit SER_R = P2^0;
  12          sbit OE_R = P2^1;
  13          sbit RCLK_R = P2^2;
  14          sbit SRCLK_R = P2^3;
  15          sbit SRCLR_R = P2^4;
  16          
  17          sbit SER_B = P2^5;
  18          sbit RCLK_B = P2^6;
  19          sbit SRCLK_B = P2^7;
  20          
  21          sbit BUTTON_UP = P3^6;
  22          sbit BUTTON_DOWN = P3^4;
  23          sbit BUTTON_LEFT = P3^7;
  24          sbit BUTTON_RIGHT = P3^3;
  25          sbit BUTTON_MIDDLE = P3^5;
  26          sbit BUTTON_HIDDEN = P0^5;
  27          
  28          #define RED 0
  29          #define GREEN 1
  30          
  31          #define LEFT 0
  32          #define RIGHT 1
  33          
  34          #define ROW_SIZE 8
  35          #define COLUMN_SIZE 16
  36          #define AREA_SIZE 128
  37          
  38          #define GETX(position) (position)&0x0F
  39          #define GETY(position) ((position)>>4)&0x07
  40          #define RESET_VRAM(position) vram[GETY(position)][GETX(position)] = 0;
  41          #define VRAM(x,y) vram[y][x]
  42          
  43          #define SCAN_PERIOD_H 0xF4
  44          #define SCAN_PERIOD_L 0x60
  45          
  46          #define TOWARD_NORTH 0x00
  47          #define TOWARD_EAST 0x01
  48          #define TOWARD_SOUTH 0x02
  49          #define TOWARD_WEST 0x03
  50          char orientation;
  51          
  52          #define TURN_LEFT 0xFF
  53          #define TURN_RIGHT 0x01
  54          #define GO_STRAIGHT 0x00
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 2   

  55          char forwardDirection;
  56          
  57          #define ALIVE 0x00
  58          #define TURN_NORTH 0x01
  59          #define TURN_EAST 0x02
  60          #define TURN_SOUTH 0x03
  61          #define TURN_WEST 0x04
  62          #define DEAD 0x05
  63          char state;
  64          
  65          /************************************************
  66           *                     VRAMS                    *
  67           ************************************************/
  68          char xdata vram[8][16];
  69          //{
  70          //  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  71          //  {0,2,2,0,0,2,2,0,0,1,1,0,0,1,1,0},
  72          //  {2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1},
  73          //  {2,2,3,2,2,3,2,2,1,1,1,1,1,1,1,1},
  74          //  {0,2,2,3,3,2,2,0,0,1,1,1,1,1,1,0},
  75          //  {0,0,2,2,2,2,0,0,0,0,1,1,1,1,0,0},
  76          //  {0,0,0,2,2,0,0,0,0,0,0,1,1,0,0,0},
  77          //  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  78          //};
  79          char digits[4];//digits on nixie
  80          
  81          /************************************************
  82           *                  code tables                 *
  83           ************************************************/
  84          char code colorfulLightCode[] = {
  85            0x40,//extinguish
  86            0x00//light up
  87          };
  88          char code buzzerCode[] = {
  89            0x80,//extinguish
  90            0x00//light up
  91          };
  92          char code digitSelectCode[] = {0x30,0x00,0x20,0x10};
  93          char code numberCode[] = {0x00,0x01,0x08,0x09,0x04,0x05,0x0C,0x0D,0x02,0x03,0xFF};
  94          /* ROW MAP
  95           * 0x0001 0x0002 0x0004 0x0008 0x0010 0x0020 0x0040 0x0080 0x0100 0x0200 0x0400 0x0800 0x1000 0x2000 0x400
             -0 0x8000 
  96           * R4     R3     R2     R5     R6     R7     R8     R1     L1     L2     L8     L7     L6     L3     L4     
             -L5
  97           *
  98           * COLUMN MAP(RED left)
  99           * 0xXXFE 0xXXFD 0xXXFB 0xXXF7 0xXXEF 0xXXDF 0xXXBF 0xXX7F
 100           * 8      7      6      5      4      3      2      1
 101           *
 102           * COLUMN MAP(RED right)
 103           * 0xXXFE 0xXXFD 0xXXFB 0xXXF7 0xXXEF 0xXXDF 0xXXBF 0xXX7F
 104           * 8      7      6      5      4      3      2      1
 105           *
 106           * COLUMN MAP(GREEN left)
 107           * 0xFEXX 0xFDXX 0xFBXX 0xF7XX 0xEFXX 0xDFXX 0xBFXX 0x7FXX
 108           * 8      7      6      5      4      3      2      1
 109           *
 110           * COLUMN MAP(GREEN right)
 111           * 0xFEXX 0xFDXX 0xFBXX 0xF7XX 0xEFXX 0xDFXX 0xBFXX 0x7FXX
 112           * 6      7      8      5      4      3      2      1
 113           */
 114          int code rowSelectCode[] = {0x0180,0x0204,0x2002,0x4001,0x8008,0x1010,0x0820,0x0440};
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 3   

 115          int code columnSelectCode[2][2][ROW_SIZE] = {
 116            {
 117              {0xFF7F, 0xFFBF, 0xFFDF, 0xFFEF, 0xFFF7, 0xFFFB, 0xFFFD, 0xFFFE},
 118              {0xFF7F, 0xFFBF, 0xFFDF, 0xFFEF, 0xFFF7, 0xFFFB, 0xFFFD, 0xFFFE}
 119            },
 120            {
 121              {0x7FFF, 0xBFFF, 0xDFFF, 0xEFFF, 0xF7FF, 0xFBFF, 0xFDFF, 0xFEFF},
 122              {0x7FFF, 0xBFFF, 0xDFFF, 0xEFFF, 0xF7FF, 0xFEFF, 0xFDFF, 0xFBFF}
 123            }
 124          };
 125          char code forwardCode[4] = {0xF0, 0x01, 0x10, 0xFF};
 126          
 127          /************************************************
 128           *    Variables in timer interrupt function     *
 129           ************************************************/
 130          unsigned char interruptCounter;
 131          char refreshCounter;
 132          char refreshCounter_buffer;
 133          char buzzCounter;
 134          char digitSelect;
 135          int leftColSelectCode[2][ROW_SIZE];
 136          int rightColSelectCode[2][ROW_SIZE];
 137          char scanner;
 138          char buzz;
 139          bit isBuzzing;
 140          bit colorfulLight;
 141          
 142          /************************************************
 143           *               data structure                 *
 144           ************************************************/
 145          char xdata snake[AREA_SIZE];
 146          unsigned char ptrHead = 0;
 147          unsigned char ptrTail = 0;
 148          unsigned char length = 0;
 149          char food = 0xFF;
 150          
 151          /************************************************
 152           *               other variables                *
 153           ************************************************/
 154          char nextOrientation;
 155          char currentPosition;
 156          char nextPosition;
 157          char currentX;
 158          char currentY;
 159          bit biteSelf;
 160          bit hitWall;
 161          bit isRefreshing;
 162          unsigned char rand;
 163          int point;
 164          int highestPoint;
 165          
 166          /************************************************
 167           *             Functions of 74HC595             *
 168           ************************************************/
 169          void Load_74HC595(int dat_B, int dat_L, int dat_R){
 170   1        char i;
 171   1        for(i=0;i<16;i++){
 172   2          SER_B=dat_B&0x8000;
 173   2          dat_B=dat_B<<1;
 174   2          SER_L=dat_L&0x8000;
 175   2          dat_L=dat_L<<1;
 176   2          SER_R=dat_R&0x8000;
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 4   

 177   2          dat_R=dat_R<<1;
 178   2         
 179   2          SRCLK_B=1;
 180   2          SRCLK_L=1;
 181   2          SRCLK_R=1;
 182   2          SRCLK_B=0;
 183   2          SRCLK_L=0;
 184   2          SRCLK_R=0;
 185   2        }
 186   1      }
 187          void Output_74HC595(){
 188   1        RCLK_B=1;
 189   1        RCLK_L=1;
 190   1        RCLK_R=1;
 191   1        RCLK_B=0;
 192   1        RCLK_L=0;
 193   1        RCLK_R=0;
 194   1      }
 195          
 196          void refresh(){
 197   1        char i,j;
 198   1        refreshCounter_buffer=refreshCounter+1;
 199   1        refreshCounter_buffer%=2;
 200   1        for(i=0;i<8;i++){
 201   2          leftColSelectCode[refreshCounter_buffer][i] = 0xFFFF;
 202   2          rightColSelectCode[refreshCounter_buffer][i] = 0xFFFF;
 203   2          for(j=0;j<8;j++){
 204   3            leftColSelectCode[refreshCounter_buffer][i] &= (vram[i][j]&0x01)!=0    ? columnSelectCode[refreshCounte
             -r][LEFT][j]   : 0xFFFF;
 205   3            leftColSelectCode[refreshCounter_buffer][i] &= (vram[i][j]&0x02)!=0  ? columnSelectCode[refreshCounter_
             -buffer][LEFT][j] : 0xFFFF;
 206   3            rightColSelectCode[refreshCounter_buffer][i]&= (vram[i][j+8]&0x01)!=0  ? columnSelectCode[refreshCounte
             -r][RIGHT][j]  : 0xFFFF;
 207   3            rightColSelectCode[refreshCounter_buffer][i]&= (vram[i][j+8]&0x02)!=0? columnSelectCode[refreshCounter_
             -buffer][RIGHT][j]: 0xFFFF;
 208   3          }
 209   2        }
 210   1        isRefreshing = 1;
 211   1        refreshCounter=refreshCounter_buffer;
 212   1        isRefreshing = 0;
 213   1      }
 214          
 215          /************************************************
 216           *           data structure function            *
 217           ************************************************/
 218          void AddHead(char newNode){
 219   1        char ytemp = GETY(newNode);
 220   1        char xtemp = GETX(newNode);
 221   1        snake[ptrHead] = newNode;
 222   1        ptrHead = (ptrHead+1)%AREA_SIZE;
 223   1        length++;
 224   1        vram[ytemp][xtemp] = (xtemp+ytemp)%2==0?1:2;
 225   1      }
 226          void DeleteTail(){
 227   1        RESET_VRAM(snake[ptrTail]);
 228   1        ptrTail = (ptrTail+1)%AREA_SIZE;
 229   1        length--;
 230   1      }
 231          
 232          
 233          /************************************************
 234           *              logic and actions               *
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 5   

 235           ************************************************/
 236          void SetFood(){
 237   1        char i,j,k;
 238   1        rand = TL1&0x7F;//get random number
 239   1        rand = rand%(AREA_SIZE-length)+1;
 240   1        k=0;
 241   1        for(i=0;i<8;i++){
 242   2          for(j=0;j<16;j++){
 243   3            if(vram[i][j]==0){
 244   4              k++;
 245   4              if(k>=rand){
 246   5                vram[i][j]=3;
 247   5                food = j|(i<<4);
 248   5                return;
 249   5              }
 250   4            }
 251   3          }
 252   2        }
 253   1        
 254   1      }
 255          void Score(){
 256   1        char i;
 257   1        AddHead(food);
 258   1        SetFood();
 259   1        point++;
 260   1        isBuzzing=1;
 261   1        buzzCounter=0;
 262   1        for(i=0;i<4;i++){
 263   2          digits[i]++;
 264   2          if(digits[i]>=10){
 265   3            digits[i]-=10;
 266   3          }
 267   2          else{
 268   3            break;
 269   3          }
 270   2        }
 271   1      }
 272          char Creep(){
 273   1        char pixelOnNextPosition;
 274   1        
 275   1        nextOrientation = (orientation+forwardDirection)&0x03;
 276   1        currentPosition = snake[(ptrTail+length-1)%AREA_SIZE];
 277   1        nextPosition = currentPosition+forwardCode[nextOrientation];
 278   1        currentX = GETX(currentPosition);
 279   1        currentY = GETY(currentPosition);
 280   1        pixelOnNextPosition = VRAM(GETX(nextPosition),GETY(nextPosition));
 281   1        
 282   1        hitWall = 
 283   1          (currentX==0        &&  nextOrientation==TOWARD_WEST) ||
 284   1          (currentX==COLUMN_SIZE-1  &&  nextOrientation==TOWARD_EAST) ||
 285   1          (currentY==0        &&  nextOrientation==TOWARD_NORTH) ||
 286   1          (currentY==ROW_SIZE-1   &&  nextOrientation==TOWARD_SOUTH);
 287   1        
 288   1        biteSelf = pixelOnNextPosition==0x01 || pixelOnNextPosition==0x02;
 289   1        if(biteSelf||hitWall){
 290   2          return DEAD;
 291   2        }
 292   1        else if(nextPosition==food){
 293   2          Score();
 294   2        }
 295   1        else{
 296   2          AddHead(nextPosition);
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 6   

 297   2          DeleteTail();
 298   2        }
 299   1        orientation = nextOrientation;
 300   1        return ALIVE;
 301   1      }
 302          char FSM(){
 303   1        switch(state){
 304   2          case ALIVE:
 305   2            forwardDirection=GO_STRAIGHT;
 306   2            break;
 307   2          case TURN_NORTH:
 308   2            if(orientation==TOWARD_WEST)    {forwardDirection=TURN_RIGHT;}
 309   2            else if(orientation==TOWARD_EAST) {forwardDirection=TURN_LEFT;}
 310   2            else              {forwardDirection=GO_STRAIGHT;}
 311   2            break;
 312   2          case TURN_EAST:
 313   2            if(orientation==TOWARD_NORTH)   {forwardDirection=TURN_RIGHT;}
 314   2            else if(orientation==TOWARD_SOUTH){forwardDirection=TURN_LEFT;}
 315   2            else              {forwardDirection=GO_STRAIGHT;}
 316   2            break;
 317   2          case TURN_SOUTH:
 318   2            if(orientation==TOWARD_EAST)    {forwardDirection=TURN_RIGHT;}
 319   2            else if(orientation==TOWARD_WEST) {forwardDirection=TURN_LEFT;}
 320   2            else              {forwardDirection=GO_STRAIGHT;}
 321   2            break;
 322   2          case TURN_WEST:
 323   2            if(orientation==TOWARD_SOUTH)   {forwardDirection=TURN_RIGHT;}
 324   2            else if(orientation==TOWARD_NORTH){forwardDirection=TURN_LEFT;}
 325   2            else              {forwardDirection=GO_STRAIGHT;}
 326   2            break;
 327   2          default:
 328   2            forwardDirection=GO_STRAIGHT;
 329   2            break;
 330   2        }
 331   1        return Creep();
 332   1      }
 333          void restart(){
 334   1        char i,j;
 335   1        for(i=0;i<8;i++){
 336   2          for(j=0;j<16;j++){
 337   3            vram[i][j]=0;
 338   3          }
 339   2        }
 340   1        
 341   1        ptrHead = 0;
 342   1        ptrTail = 0;
 343   1        length = 0;
 344   1        interruptCounter=0;
 345   1        refreshCounter=0;
 346   1        colorfulLight=0;
 347   1        point=0;
 348   1        isBuzzing=0;
 349   1        
 350   1        AddHead(0x00);
 351   1        AddHead(0x01);
 352   1        AddHead(0x02);
 353   1        orientation = TOWARD_EAST;
 354   1        forwardDirection = GO_STRAIGHT;
 355   1        state = ALIVE;
 356   1        
 357   1        SetFood();
 358   1        refresh();
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 7   

 359   1      }
 360          /************************************************
 361           *                 Initializer                  *
 362           ************************************************/
 363          void initializer(){
 364   1        char i;
 365   1        TMOD=0x21;//Timer1 8bit_auto_load Timer0 16bit_normal
 366   1        
 367   1        TH0=SCAN_PERIOD_H;
 368   1        TL0=SCAN_PERIOD_L;
 369   1      
 370   1        TH1=0x00;
 371   1        TL1=0x00;
 372   1        
 373   1        //Eable timers
 374   1        TR0=1;
 375   1        TR1=1;
 376   1      
 377   1        
 378   1        //External interruption 0 is triggered by negative edge
 379   1        IT0=1;
 380   1        
 381   1        IP=0x02;
 382   1        
 383   1        highestPoint=0;
 384   1        //read highest point
 385   1        digits[0] = byte_read(0x2001);
 386   1        digits[1] = byte_read(0x2002);
 387   1        digits[2] = byte_read(0x2003);
 388   1        digits[3] = byte_read(0x2004);
 389   1        for(i=0;i<3;i++){
 390   2          highestPoint += digits[3-i];
 391   2          highestPoint *= 10;
 392   2        }
 393   1        highestPoint += digits[0];
 394   1        
 395   1        restart();
 396   1        
 397   1        //Only eable timer0 IRQ, timer1 functions as a random number generator
 398   1        ET0=1;
 399   1        ET1=0;
 400   1      
 401   1        //Interrupt switch
 402   1        EA=1;
 403   1      }
 404          
 405          void main(void){
 406   1        char i;
 407   1        initializer();
 408   1        //wait for button
 409   1        while(BUTTON_MIDDLE){
 410   2          if(BUTTON_HIDDEN==0){
 411   3            SectorErase(0x2000);
 412   3            byte_write(0x2001,0);
 413   3            byte_write(0x2002,0);
 414   3            byte_write(0x2003,0);
 415   3            byte_write(0x2004,0);
 416   3            highestPoint=0;
 417   3          }
 418   2        }
 419   1        //reset nixie
 420   1        for(i=0;i<4;i++){
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 8   

 421   2          digits[i]=0;
 422   2        }
 423   1        EX0=1;
 424   1        while(1){
 425   2          if(state==DEAD){
 426   3            EX0=0;
 427   3            if(point>=highestPoint){
 428   4              SectorErase(0x2000);
 429   4              byte_write(0x2001,digits[0]);
 430   4              byte_write(0x2002,digits[1]);
 431   4              byte_write(0x2003,digits[2]);
 432   4              byte_write(0x2004,digits[3]);
 433   4              highestPoint=point;
 434   4              colorfulLight=1;
 435   4            }
 436   3            else{
 437   4              colorfulLight=0;
 438   4            }
 439   3            while(BUTTON_MIDDLE){
 440   4            }
 441   3            restart();
 442   3            for(i=0;i<4;i++){
 443   4              digits[i]=0;
 444   4            }
 445   3            EX0=1;
 446   3          }
 447   2          else if(state==ALIVE){
 448   3            if(state==ALIVE&&BUTTON_UP==0){
 449   4              state = TURN_NORTH;
 450   4            }
 451   3            else if(state==ALIVE&&BUTTON_DOWN==0){
 452   4              state = TURN_SOUTH;
 453   4            }
 454   3            else if(state==ALIVE&&BUTTON_LEFT==0){
 455   4              state = TURN_WEST;
 456   4            }
 457   3            else if(state==ALIVE&&BUTTON_RIGHT==0){
 458   4              state = TURN_EAST;
 459   4            }
 460   3          }
 461   2          else{
 462   3          }
 463   2        }
 464   1      }
 465          void EX0_IRQ(void) interrupt 0{
 466   1        state=FSM();
 467   1        if(state!=DEAD){
 468   2          refresh();
 469   2        }
 470   1      }
 471          void Timer0_IRQ(void) interrupt 1{
 472   1        interruptCounter++;
 473   1        if(isBuzzing){
 474   2          isBuzzing=((buzzCounter++)<=0x1F);
 475   2        }
 476   1        digitSelect = interruptCounter&0x03;
 477   1        scanner = interruptCounter&0x07;
 478   1        buzz = interruptCounter&(isBuzzing?0x01:0x00);
 479   1        
 480   1        
 481   1        NEXIE_PORT = 
 482   1          digitSelectCode[digitSelect] |
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2022 22:54:37 PAGE 9   

 483   1          numberCode[digits[digitSelect]] |
 484   1          colorfulLightCode[colorfulLight] |
 485   1          buzzerCode[buzz];
 486   1        
 487   1        if(!isRefreshing){
 488   2          OE_R = 1;
 489   2          OE_L = 1;
 490   2          Load_74HC595(rowSelectCode[scanner],leftColSelectCode[refreshCounter][scanner],rightColSelectCode[refres
             -hCounter][scanner]);
 491   2          Output_74HC595();
 492   2          OE_R = 0;
 493   2          OE_L = 0;
 494   2        }
 495   1        
 496   1        TH0=SCAN_PERIOD_H;
 497   1        TL0=SCAN_PERIOD_L;
 498   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2651    ----
   CONSTANT SIZE    =    103    ----
   XDATA SIZE       =    256    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     92       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
