C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include <eeprom.h>
   3          #define NEXIE_PORT P1
   4          
   5          sbit SER_L = P0^0;
   6          sbit OE_L = P0^1;
   7          sbit RCLK_L = P0^2;
   8          sbit SRCLK_L = P0^3;
   9          sbit SRCLR_L = P0^4;
  10          
  11          sbit SER_R = P2^0;
  12          sbit OE_R = P2^1;
  13          sbit RCLK_R = P2^2;
  14          sbit SRCLK_R = P2^3;
  15          sbit SRCLR_R = P2^4;
  16          
  17          sbit SER_B = P2^5;
  18          sbit RCLK_B = P2^6;
  19          sbit SRCLK_B = P2^7;
  20          
  21          sbit BUTTON_UP = P3^6;
  22          sbit BUTTON_DOWN = P3^4;
  23          sbit BUTTON_LEFT = P3^7;
  24          sbit BUTTON_RIGHT = P3^3;
  25          sbit BUTTON_MIDDLE = P3^5;
  26          
  27          #define RED 0
  28          #define GREEN 1
  29          
  30          #define LEFT 0
  31          #define RIGHT 1
  32          
  33          #define ROW_SIZE 8
  34          #define COLUMN_SIZE 16
  35          #define AREA_SIZE 128
  36          
  37          #define GETX(position) (position)&0x0F
  38          #define GETY(position) ((position)>>4)&0x07
  39          #define RESET_VRAM(position) vram[GETY(position)][GETX(position)] = 0;
  40          #define VRAM(x,y) vram[y][x]
  41          
  42          #define SCAN_PERIOD_H 0xF4
  43          #define SCAN_PERIOD_L 0x60
  44          
  45          #define TOWARD_NORTH 0x00
  46          #define TOWARD_EAST 0x01
  47          #define TOWARD_SOUTH 0x02
  48          #define TOWARD_WEST 0x03
  49          char orientation;
  50          
  51          #define TURN_LEFT 0xFF
  52          #define TURN_RIGHT 0x01
  53          #define GO_STRAIGHT 0x00
  54          char forwardDirection;
C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 2   

  55          
  56          #define ALIVE 0x00
  57          #define TURN_NORTH 0x01
  58          #define TURN_EAST 0x02
  59          #define TURN_SOUTH 0x03
  60          #define TURN_WEST 0x04
  61          #define DEAD 0x05
  62          char state;
  63          
  64          /************************************************
  65           *                     VRAMS                    *
  66           ************************************************/
  67          char xdata vram[8][16];
  68          //{
  69          //  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  70          //  {0,2,2,0,0,2,2,0,0,1,1,0,0,1,1,0},
  71          //  {2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1},
  72          //  {2,2,3,2,2,3,2,2,1,1,1,1,1,1,1,1},
  73          //  {0,2,2,3,3,2,2,0,0,1,1,1,1,1,1,0},
  74          //  {0,0,2,2,2,2,0,0,0,0,1,1,1,1,0,0},
  75          //  {0,0,0,2,2,0,0,0,0,0,0,1,1,0,0,0},
  76          //  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  77          //};
  78          char digits[4];//digits on nixie
  79          
  80          /************************************************
  81           *                  code tables                 *
  82           ************************************************/
  83          char code colorfulLightCode[] = {
  84            0x40,//extinguish
  85            0x00//light up
  86          };
  87          char code buzzerCode[] = {
  88            0x80,//extinguish
  89            0x00//light up
  90          };
  91          char code digitSelectCode[] = {0x30,0x00,0x20,0x10};
  92          char code numberCode[] = {0x00,0x01,0x08,0x09,0x04,0x05,0x0C,0x0D,0x02,0x03,0xFF};
  93          /* ROW MAP
  94           * 0x0001 0x0002 0x0004 0x0008 0x0010 0x0020 0x0040 0x0080 0x0100 0x0200 0x0400 0x0800 0x1000 0x2000 0x400
             -0 0x8000 
  95           * R4     R3     R2     R5     R6     R7     R8     R1     L1     L2     L8     L7     L6     L3     L4     
             -L5
  96           *
  97           * COLUMN MAP(RED left)
  98           * 0xXXFE 0xXXFD 0xXXFB 0xXXF7 0xXXEF 0xXXDF 0xXXBF 0xXX7F
  99           * 8      7      6      5      4      3      2      1
 100           *
 101           * COLUMN MAP(RED right)
 102           * 0xXXFE 0xXXFD 0xXXFB 0xXXF7 0xXXEF 0xXXDF 0xXXBF 0xXX7F
 103           * 8      7      6      5      4      3      2      1
 104           *
 105           * COLUMN MAP(GREEN left)
 106           * 0xFEXX 0xFDXX 0xFBXX 0xF7XX 0xEFXX 0xDFXX 0xBFXX 0x7FXX
 107           * 8      7      6      5      4      3      2      1
 108           *
 109           * COLUMN MAP(GREEN right)
 110           * 0xFEXX 0xFDXX 0xFBXX 0xF7XX 0xEFXX 0xDFXX 0xBFXX 0x7FXX
 111           * 6      7      8      5      4      3      2      1
 112           */
 113          int code rowSelectCode[] = {0x0180,0x0204,0x2002,0x4001,0x8008,0x1010,0x0820,0x0440};
 114          int code columnSelectCode[2][2][ROW_SIZE] = {
C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 3   

 115            {
 116              {0xFF7F, 0xFFBF, 0xFFDF, 0xFFEF, 0xFFF7, 0xFFFB, 0xFFFD, 0xFFFE},
 117              {0xFF7F, 0xFFBF, 0xFFDF, 0xFFEF, 0xFFF7, 0xFFFB, 0xFFFD, 0xFFFE}
 118            },
 119            {
 120              {0x7FFF, 0xBFFF, 0xDFFF, 0xEFFF, 0xF7FF, 0xFBFF, 0xFDFF, 0xFEFF},
 121              {0x7FFF, 0xBFFF, 0xDFFF, 0xEFFF, 0xF7FF, 0xFEFF, 0xFDFF, 0xFBFF}
 122            }
 123          };
 124          char code forwardCode[4] = {0xF0, 0x01, 0x10, 0xFF};
 125          
 126          /************************************************
 127           *    Variables in timer interrupt function     *
 128           ************************************************/
 129          unsigned char interruptCounter;
 130          char refreshCounter;
 131          char refreshCounter_buffer;
 132          char buzzCounter;
 133          char digitSelect;
 134          int leftColSelectCode[2][ROW_SIZE];
 135          int rightColSelectCode[2][ROW_SIZE];
 136          char scanner;
 137          char buzz;
 138          bit isBuzzing;
 139          bit colorfulLight;
 140          
 141          /************************************************
 142           *               data structure                 *
 143           ************************************************/
 144          char xdata snake[AREA_SIZE];
 145          unsigned char ptrHead = 0;
 146          unsigned char ptrTail = 0;
 147          unsigned char length = 0;
 148          char food = 0xFF;
 149          
 150          /************************************************
 151           *               other variables                *
 152           ************************************************/
 153          char nextOrientation;
 154          char currentPosition;
 155          char nextPosition;
 156          char currentX;
 157          char currentY;
 158          bit biteSelf;
 159          bit hitWall;
 160          bit isRefreshing;
 161          unsigned char rand;
 162          int point;
 163          int highestPoint;
 164          
 165          /************************************************
 166           *             Functions of 74HC595             *
 167           ************************************************/
 168          void Load_74HC595(int dat_B, int dat_L, int dat_R){
 169   1        char i;
 170   1        for(i=0;i<16;i++){
 171   2          SER_B=dat_B&0x8000;
 172   2          dat_B=dat_B<<1;
 173   2          SER_L=dat_L&0x8000;
 174   2          dat_L=dat_L<<1;
 175   2          SER_R=dat_R&0x8000;
 176   2          dat_R=dat_R<<1;
C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 4   

 177   2         
 178   2          SRCLK_B=1;
 179   2          SRCLK_L=1;
 180   2          SRCLK_R=1;
 181   2          SRCLK_B=0;
 182   2          SRCLK_L=0;
 183   2          SRCLK_R=0;
 184   2        }
 185   1      }
 186          void Output_74HC595(){
 187   1        RCLK_B=1;
 188   1        RCLK_L=1;
 189   1        RCLK_R=1;
 190   1        RCLK_B=0;
 191   1        RCLK_L=0;
 192   1        RCLK_R=0;
 193   1      }
 194          
 195          void refresh(){
 196   1        char i,j;
 197   1        refreshCounter_buffer=refreshCounter+1;
 198   1        refreshCounter_buffer%=2;
 199   1        isRefreshing = 1;
 200   1        for(i=0;i<8;i++){
 201   2          leftColSelectCode[refreshCounter_buffer][i] = 0xFFFF;
 202   2          rightColSelectCode[refreshCounter_buffer][i] = 0xFFFF;
 203   2          for(j=0;j<8;j++){
 204   3            leftColSelectCode[refreshCounter_buffer][i] &= (vram[i][j]&0x01)!=0    ? columnSelectCode[refreshCounte
             -r][LEFT][j]   : 0xFFFF;
 205   3            leftColSelectCode[refreshCounter_buffer][i] &= (vram[i][j]&0x02)!=0  ? columnSelectCode[refreshCounter_
             -buffer][LEFT][j] : 0xFFFF;
 206   3            rightColSelectCode[refreshCounter_buffer][i]&= (vram[i][j+8]&0x01)!=0  ? columnSelectCode[refreshCounte
             -r][RIGHT][j]  : 0xFFFF;
 207   3            rightColSelectCode[refreshCounter_buffer][i]&= (vram[i][j+8]&0x02)!=0? columnSelectCode[refreshCounter_
             -buffer][RIGHT][j]: 0xFFFF;
 208   3          }
 209   2        }
 210   1        refreshCounter=refreshCounter_buffer;
 211   1        isRefreshing = 0;
 212   1      }
 213          
 214          /************************************************
 215           *           data structure function            *
 216           ************************************************/
 217          void AddHead(char newNode){
 218   1        char ytemp = GETY(newNode);
 219   1        char xtemp = GETX(newNode);
 220   1        snake[ptrHead] = newNode;
 221   1        ptrHead = (ptrHead+1)%AREA_SIZE;
 222   1        length++;
 223   1        vram[ytemp][xtemp] = (xtemp+ytemp)%2==0?1:2;
 224   1      }
 225          void DeleteTail(){
 226   1        RESET_VRAM(snake[ptrTail]);
 227   1        ptrTail = (ptrTail+1)%AREA_SIZE;
 228   1        length--;
 229   1      }
 230          
 231          
 232          /************************************************
 233           *              logic and actions               *
 234           ************************************************/
C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 5   

 235          void SetFood(){
 236   1        char i,j,k;
 237   1        rand = TL1&0x7F;//get random number
 238   1        rand = rand%(AREA_SIZE-length)+1;
 239   1        k=0;
 240   1        for(i=0;i<8;i++){
 241   2          for(j=0;j<16;j++){
 242   3            if(vram[i][j]==0){
 243   4              k++;
 244   4              if(k>=rand){
 245   5                vram[i][j]=3;
 246   5                food = j|(i<<4);
 247   5                return;
 248   5              }
 249   4            }
 250   3          }
 251   2        }
 252   1        
 253   1      }
 254          void Score(){
 255   1        char i;
 256   1        AddHead(food);
 257   1        SetFood();
 258   1        point++;
 259   1        isBuzzing=1;
 260   1        buzzCounter=0;
 261   1        for(i=0;i<4;i++){
 262   2          digits[i]++;
 263   2          if(digits[i]>=10){
 264   3            digits[i]-=10;
 265   3          }
 266   2          else{
 267   3            break;
 268   3          }
 269   2        }
 270   1      }
 271          char Creep(){
 272   1        nextOrientation = (orientation+forwardDirection)&0x03;
 273   1        currentPosition = snake[(ptrTail+length-1)%AREA_SIZE];
 274   1        nextPosition = currentPosition+forwardCode[nextOrientation];
 275   1        currentX = GETX(currentPosition);
 276   1        currentY = GETY(currentPosition);
 277   1        biteSelf = VRAM(GETX(nextPosition),GETY(nextPosition));
 278   1        hitWall = 
 279   1          (currentX==0        &&  nextOrientation==TOWARD_WEST) ||
 280   1          (currentX==COLUMN_SIZE-1  &&  nextOrientation==TOWARD_EAST) ||
 281   1          (currentY==0        &&  nextOrientation==TOWARD_NORTH) ||
 282   1          (currentY==ROW_SIZE-1   &&  nextOrientation==TOWARD_SOUTH);
 283   1        if(nextPosition==food){
 284   2          Score();
 285   2        }
 286   1        else if(biteSelf||hitWall){
 287   2          return DEAD;
 288   2        }
 289   1        else{
 290   2          AddHead(nextPosition);
 291   2          DeleteTail();
 292   2        }
 293   1        orientation = nextOrientation;
 294   1        return ALIVE;
 295   1      }
 296          char FSM(){
C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 6   

 297   1        switch(state){
 298   2          case ALIVE:
 299   2            forwardDirection=GO_STRAIGHT;
 300   2            break;
 301   2          case TURN_NORTH:
 302   2            if(orientation==TOWARD_WEST)    {forwardDirection=TURN_RIGHT;}
 303   2            else if(orientation==TOWARD_EAST) {forwardDirection=TURN_LEFT;}
 304   2            else              {forwardDirection=GO_STRAIGHT;}
 305   2            break;
 306   2          case TURN_EAST:
 307   2            if(orientation==TOWARD_NORTH)   {forwardDirection=TURN_RIGHT;}
 308   2            else if(orientation==TOWARD_SOUTH){forwardDirection=TURN_LEFT;}
 309   2            else              {forwardDirection=GO_STRAIGHT;}
 310   2            break;
 311   2          case TURN_SOUTH:
 312   2            if(orientation==TOWARD_EAST)    {forwardDirection=TURN_RIGHT;}
 313   2            else if(orientation==TOWARD_WEST) {forwardDirection=TURN_LEFT;}
 314   2            else              {forwardDirection=GO_STRAIGHT;}
 315   2            break;
 316   2          case TURN_WEST:
 317   2            if(orientation==TOWARD_SOUTH)   {forwardDirection=TURN_RIGHT;}
 318   2            else if(orientation==TOWARD_NORTH){forwardDirection=TURN_LEFT;}
 319   2            else              {forwardDirection=GO_STRAIGHT;}
 320   2            break;
 321   2          default:
 322   2            forwardDirection=GO_STRAIGHT;
 323   2            break;
 324   2        }
 325   1        return Creep();
 326   1      }
 327          void restart(){
 328   1        char i,j;
 329   1        for(i=0;i<8;i++){
 330   2          for(j=0;j<16;j++){
 331   3            vram[i][j]=0;
 332   3          }
 333   2        }
 334   1        
 335   1        ptrHead = 0;
 336   1        ptrTail = 0;
 337   1        length = 0;
 338   1        interruptCounter=0;
 339   1        refreshCounter=0;
 340   1        colorfulLight=0;
 341   1        point=0;
 342   1        isBuzzing=0;
 343   1        
 344   1        AddHead(0x00);
 345   1        AddHead(0x01);
 346   1        AddHead(0x02);
 347   1        orientation = TOWARD_EAST;
 348   1        forwardDirection = GO_STRAIGHT;
 349   1        state = ALIVE;
 350   1        
 351   1        SetFood();
 352   1        refresh();
 353   1      }
 354          /************************************************
 355           *                 Initializer                  *
 356           ************************************************/
 357          void initializer(){
 358   1        char i;
C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 7   

 359   1        TMOD=0x21;//Timer1 8bit_auto_load Timer0 16bit_normal
 360   1        
 361   1        TH0=SCAN_PERIOD_H;
 362   1        TL0=SCAN_PERIOD_L;
 363   1      
 364   1        TH1=0x00;
 365   1        TL1=0x00;
 366   1        
 367   1        //Eable timers
 368   1        TR0=1;
 369   1        TR1=1;
 370   1      
 371   1        
 372   1        //External interruption 0 is triggered by negative edge
 373   1        IT0=1;
 374   1        
 375   1        IP=0x02;
 376   1        
 377   1        highestPoint=0;
 378   1        //read highest point
 379   1        digits[0] = byte_read(0x2001);
 380   1        digits[1] = byte_read(0x2002);
 381   1        digits[2] = byte_read(0x2003);
 382   1        digits[3] = byte_read(0x2004);
 383   1        for(i=0;i<3;i++){
 384   2          highestPoint += digits[3-i];
 385   2          highestPoint *= 10;
 386   2        }
 387   1        highestPoint += digits[0];
 388   1        
 389   1        restart();
 390   1        
 391   1        //Only eable timer0 IRQ, timer1 functions as a random number generator
 392   1        ET0=1;
 393   1        ET1=0;
 394   1      
 395   1        //Interrupt switch
 396   1        EA=1;
 397   1      }
 398          
 399          void main(void){
 400   1        char i;
 401   1        initializer();
 402   1        //wait for button
 403   1        while(BUTTON_MIDDLE){
 404   2        }
 405   1        //reset nixie
 406   1        for(i=0;i<4;i++){
 407   2          digits[i]=0;
 408   2        }
 409   1        EX0=1;
 410   1        while(1){
 411   2          if(state==DEAD){
 412   3            EX0=0;
 413   3            if(point>=highestPoint){
 414   4              SectorErase(0x2000);
 415   4              byte_write(0x2001,digits[0]);
 416   4              byte_write(0x2002,digits[1]);
 417   4              byte_write(0x2003,digits[2]);
 418   4              byte_write(0x2004,digits[3]);
 419   4              highestPoint=point;
 420   4              colorfulLight=1;
C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 8   

 421   4            }
 422   3            else{
 423   4              colorfulLight=0;
 424   4            }
 425   3            while(BUTTON_MIDDLE){
 426   4            }
 427   3            restart();
 428   3            for(i=0;i<4;i++){
 429   4              digits[i]=0;
 430   4            }
 431   3            EX0=1;
 432   3          }
 433   2          else if(state==ALIVE){
 434   3            if(BUTTON_UP==0){
 435   4              state = TURN_NORTH;
 436   4            }
 437   3            else if(BUTTON_DOWN==0){
 438   4              state = TURN_SOUTH;
 439   4            }
 440   3            else if(BUTTON_LEFT==0){
 441   4              state = TURN_WEST;
 442   4            }
 443   3            else if(BUTTON_RIGHT==0){
 444   4              state = TURN_EAST;
 445   4            }
 446   3            else{
 447   4              state = ALIVE;
 448   4            }
 449   3          }
 450   2          else{
 451   3          }
 452   2        }
 453   1      }
 454          void EX0_IRQ(void) interrupt 0{
 455   1        state=FSM();
 456   1        if(state!=DEAD){
 457   2          refresh();
 458   2        }
 459   1      }
 460          void Timer0_IRQ(void) interrupt 1{
 461   1        interruptCounter++;
 462   1        if(isBuzzing){
 463   2          isBuzzing=((buzzCounter++)<=0x1F);
 464   2        }
 465   1        digitSelect = interruptCounter&0x03;
 466   1        scanner = interruptCounter&0x07;
 467   1        buzz = interruptCounter&(isBuzzing?0x01:0x00);
 468   1        
 469   1        
 470   1        NEXIE_PORT = 
 471   1          digitSelectCode[digitSelect] |
 472   1          numberCode[digits[digitSelect]] |
 473   1          colorfulLightCode[colorfulLight] |
 474   1          buzzerCode[buzz];
 475   1        
 476   1        if(!isRefreshing){
 477   2          OE_R = 1;
 478   2          OE_L = 1;
 479   2          Load_74HC595(rowSelectCode[scanner],leftColSelectCode[refreshCounter][scanner],rightColSelectCode[refres
             -hCounter][scanner]);
 480   2          Output_74HC595();
 481   2          OE_R = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              04/01/2021 10:42:02 PAGE 9   

 482   2          OE_L = 0;
 483   2        }
 484   1        
 485   1        TH0=SCAN_PERIOD_H;
 486   1        TL0=SCAN_PERIOD_L;
 487   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2560    ----
   CONSTANT SIZE    =    103    ----
   XDATA SIZE       =    256    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     92       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
